name: Build Docker image, Push to AWS ECR and Deploy CloudFormation

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ECR_REPOSITORY: chat-server
  CF_STACK_NAME: ecs-fargate
  LOG_GROUP_NAME: ecs/chat-server
  LOG_GROUP_POLICY_NAME: chat-server-group-policy
  CLUSTER_NAME: chat-server
  TASK_FAMILY: chat-server-task-family
  TASK_CPU: 256
  TASK_MEMORY: 512
  TASK_EXECUTION_ROLE_ARN: arn:aws:iam::883869506849:role/lambdas-te-task-execution-role
  CONTAINER_NAME: your-container-name
  CONTAINER_PORT: 8000
  SERVICE_NAME: chat-server
  DESIRED_COUNT: 1
  SECURITY_GROUP: your-security-group
  SUBNET1: your-subnet-1
  SUBNET2: your-subnet-2
  LOAD_BALANCER_NAME: your-load-balancer-name
  CERTIFICATE_ARN: your-certificate-arn
  TARGET_GROUP_NAME: your-target-group-name
  VPC_ID: your-vpc-id
  DOMAIN_NAME: api.asterisk.chat


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg PINECONE_KEY=${{ secrets.PINECONE_KEY }} \
            --build-arg OPENAI_KEY=${{ secrets.OPENAI_KEY }} \
            --build-arg DYNAMODB_KEY=${{ secrets.DYNAMODB_KEY }} \
            --build-arg AUTH0_KEY=${{ secrets.AUTH0_KEY }} \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

  deploy-cloudformation:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC

      - name: Deploy Logs to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ChatServerLogsStack
          template: ./ci/cloudwatch.yaml
          capabilities: CAPABILITY_IAM
          parameter-overrides: >-
            LogGroupName=${{ env.LOG_GROUP_NAME }},
            LogStreamName=${{ github.sha }},
            LogGroupPolicyName=${{ env.LOG_GROUP_POLICY_NAME }}

      - name: Deploy ECS to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ChatServerECSStack
          template: ./ci/ecs.yaml
          capabilities: CAPABILITY_IAM
          parameter-overrides: >-
            ClusterName=${{ env.CLUSTER_NAME }},
            TaskFamily=${{ env.TASK_FAMILY }},
            TaskCpu=${{ env.TASK_CPU }},
            TaskMemory=${{ env.TASK_MEMORY }},
            TaskExecutionRoleArn=${{ env.TASK_EXECUTION_ROLE_ARN }},
            ContainerName=${{ env.CONTAINER_NAME }},
            ContainerImage=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},
            ContainerPort=${{ env.CONTAINER_PORT }},
            ServiceName=${{ env.SERVICE_NAME }},
            DesiredCount=${{ env.DESIRED_COUNT }},
            SecurityGroup=${{ env.SECURITY_GROUP }},
            Subnet1=${{ env.SUBNET1 }},
            Subnet2=${{ env.SUBNET2 }},
            LogGroupName=${{ env.LOG_GROUP_NAME }}

      - name: Deploy ELB to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ChatServerELBStack
          template: ./ci/elb.yaml
          capabilities: CAPABILITY_IAM
          parameter-overrides: >-
            LoadBalancerName=${{ env.LOAD_BALANCER_NAME }},
            Subnet1=${{ env.SUBNET1 }},
            Subnet2=${{ env.SUBNET2 }},
            SecurityGroup=${{ env.SECURITY_GROUP }},
            CertificateArn=${{ env.CERTIFICATE_ARN }},
            TargetGroupName=${{ env.TARGET_GROUP_NAME }},
            ContainerPort=${{ env.CONTAINER_PORT }},
            VpcId=${{ env.VPC_ID }},
            DomainName=${{ env.DOMAIN_NAME }}

      - name: Deploy Route53 to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ChatServerR53Stack
          template: ./ci/r53.yaml
          capabilities: CAPABILITY_IAM
          parameter-overrides: >-
            DomainName=${{ env.DOMAIN_NAME }}
